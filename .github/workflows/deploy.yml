name: Deploy FastAPI with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write credentials JSON to file
        run: echo '${{ secrets.GCP_SA_KEY }}' > gcp-sa.json

      - name: Set GOOGLE_APPLICATION_CREDENTIALS env var
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp-sa.json" >> $GITHUB_ENV

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-fairuz-agiza

      - name: Configure Docker to use Artifact Registry
        run: gcloud auth configure-docker asia-southeast2-docker.pkg.dev

      - name: Build and push Docker images
        run: |
          IMAGE_NAME=asia-southeast2-docker.pkg.dev/dev-fairuz-agiza/backend-repo/backend-magnasight-fastapi
          IMAGE_TAG=${{ github.sha }}

          echo "Building Docker image..."
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$IMAGE_TAG .

          echo "Pushing Docker images to Google Artifact Registry..."
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG

      - name: Pull latest code from repository
        run: |
          cd ~/backend-magnasight-fastapi
          echo "Pulling latest code from repository..."
          git fetch origin
          git reset --hard origin/main
          git pull

      - name: Setup environment variables
        run: |
          cd ~/backend-magnasight-fastapi
          echo "Setting up environment variables..."
          
          # Write Firebase secret to .env.production using cat with heredoc
          cat > .env.production << 'FIREBASE_EOF'
          FIREBASE_SA_JSON=${{ secrets.FIREBASE_SA_JSON }}
          FIREBASE_EOF
          
          echo "Environment file created successfully"
          echo "File size: $(wc -c < .env.production) bytes"

      - name: Deploy containers
        run: |
          cd ~/backend-magnasight-fastapi
          echo "Stopping old containers..."
          docker compose down

          echo "Pulling latest image..."
          docker compose pull

          echo "Loading production environment variables..."
          if [ -f .env.production ]; then
            export $(cat .env.production | xargs)
            echo "Production environment variables loaded"
          fi

          echo "Starting containers..."
          docker compose up -d
          echo "Deployment completed successfully!"

      - name: Verify deployment
        run: |
          echo "Waiting for containers to start..."
          sleep 10
          echo "Checking container status..."
          docker compose ps
          echo "Checking application logs..."
          docker compose logs --tail=20 api